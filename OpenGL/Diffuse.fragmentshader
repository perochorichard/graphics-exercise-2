#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material {
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light {
	vec3 position;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;

	vec3 direction;
	float coneAngle;
	float falloff;
};

uniform Material material;
uniform Light light;

void main() {
	vec3 lightDir = normalize(light.position - retFragPos); // normalize for correct dot product
	float a = cos(light.coneAngle);
	float d = dot(normalize(light.direction), -lightDir);
	if (a < d) {
		float lambertianStrength = dot(lightDir, retNormal); // Add lambertian lighting
		vec3 refl = reflect(-lightDir, retNormal);
		float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength);
		float distance = length(light.position - retFragPos);
		float att = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
		att *= 1 - pow(clamp(a / d, 0.0f, 1.0f), light.falloff);

		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor * att;
		vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light.diffuseColor * att;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor * att;

		FragColor = vec4(ambient + lambertian + specular, 1.0f);
	} else {
		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
		FragColor = vec4(ambient, 1.0f);
	}

}
