#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material {
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light {
	vec3 position;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;

	vec3 direction;
	float coneAngle;
	float falloff;
};

uniform Material material;
#define NR_LIGHTS 4
uniform Light light[NR_LIGHTS];

void main() {
	vec4 finalColor = vec4(0);
	for (int i = 0; i < NR_LIGHTS; i++) {
		vec3 lightDir = normalize(light[i].position - retFragPos); // Normalize, for correct dot product resuts
		float a = cos(light[i].coneAngle);
		float d = dot(normalize(light[i].direction), -lightDir);
		if (a < d) {
			float lambertianStrength = dot(lightDir, retNormal); // Lambertian component
			vec3 refl = reflect(-lightDir, retNormal);
			float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength); // Specular component
			float distance = length(light[i].position - retFragPos);
			float att = 1.0f / (light[i].constant + light[i].linear * distance + light[i].quadratic * (distance * distance)); // point falloff
			att *= 1 - pow(a / d, light[i].falloff); // Spotlight falloff

			vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor * att;
			vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor * att;
			vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor * att;
			finalColor += vec4(ambient + lambertian + specular, 1.0f); // Calculate final color
		} else {
			vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor / NR_LIGHTS;
			finalColor += vec4(ambient, 1.0f); // Calculate final color
		}
	}

	FragColor = finalColor;
}
