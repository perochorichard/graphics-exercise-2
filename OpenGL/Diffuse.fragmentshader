#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material {
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light {
	vec3 position;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
};

uniform Material material;
uniform Light light;

uniform float SpecularStrength;
uniform vec3 SpecularColor;
uniform vec3 LightPosition;
uniform vec3 LightColor;
uniform vec3 AmbientLight;
uniform vec3 DiffuseColor;
uniform sampler2D sampler1;
uniform sampler2D sampler2;

void main() {
	vec3 lightDir = normalize(light.position - retFragPos); // normalize for correct dot product
	float lambertianStrength = dot(lightDir, retNormal); // Add lambertian lighting
	vec3 refl = reflect(-lightDir, retNormal);
	float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength);

	vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
	vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light.diffuseColor;
	vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor;

	FragColor = vec4(ambient + lambertian + specular, 1.0f);
}
